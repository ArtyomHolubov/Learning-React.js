{
    "hw1": {
        "description": "<div _ngcontent-ofl-c18=\"\" class=\"homework__info-content-description wysiwyg-content wysiwyg-content--converted\"><p>Реализовать таблицу товаров на ReactJS</p><p><br></p><p>Установить необходимое окружение:</p><ol><li>NodeJS последней версии <a href=\"https://nodejs.org/en/\" target=\"_blank\" class=\"link \">https://nodejs.org/en/</a> (LTS)</li><li>Сгенерировать react приложение с помощью команды npx create-react-app &lt;имя&gt;</li></ol><p><br></p><p>На странице таблица с 4 колонками (Название, категория, цена, остаток, действие)</p><p><br></p><p>Колонка действие содержит кнопку удалить, при нажатии - удаляет товар</p><p><br></p><p>Дополнительно:</p><p>Снизу форма добавление товара:</p><p>С 4 инпутами и кнопкой \"Добавить товар\", при нажатии на кнопку добавляет новый товар в таблицу.</p><p><br></p><p>Использовать код с классной работы как пример</p><p><br></p><p>Примерная архитектура компонентов (можно свою):</p><p><br></p><p>App - Главный класс приложения, содержащий <em>state</em> с товарами.</p><p>ProductTable - таблица с продуктами</p><p>ProductRow - строка с информацией о продукте</p><p>AddProductForm</p><p><br></p><p>*****************************</p><p>Задания со звездочкой:</p><ul><li>Добавить валидацию на инпуты</li><li>Сделать редактирование товара</li><li>Использовать библиотеку готовых компонентов компонентов на подобии: <a href=\"https://react.semantic-ui.com/\" target=\"_blank\" class=\"link \">https://react.semantic-ui.com/</a> или <a href=\"https://material-ui.com/ru/\" target=\"_blank\" class=\"link \">https://material-ui.com/ru/</a></li></ul><p><br></p><p>******************************</p><p>Решение скидывайте как ссылку на GitHub с кодом. Или на крайний случай - прикрепляйте архив с кодом решения.</p></div>"
    },
    "hw2": {
        "description": "<div _ngcontent-gtb-c25=\"\" class=\"homework__info-content-description wysiwyg-content wysiwyg-content--converted\"><p>Написать обертку над Glide.js <a href=\"https://glidejs.com/\" target=\"_blank\" class=\"link \">https://glidejs.com/</a> которая позволит библиотеке работать как реакт компонент, пример использования:</p><p><br></p><p>Помним про методы жизненного цикла компонента которые мы рассматривали в классной работе.</p><p>Реализовать все 3 главных</p><p><br></p><p><br></p><ol><li>componentDidMount() - должен инициализировать GlideJs</li><li>componentDidUpdate() - должен обновлять options у GlideJs</li><li>componentWillUnmount() - должен уничnожать отрендеренный GlideJs</li></ol><p><br></p><p>Пример как вы или другие разработчики могут использовать ваш компонент (не обязательно так,  сделайте как считаете нужным)</p><p><br></p><pre class=\"ql-syntax\">&lt;Glider options={options}&gt;&lt;img src='....'&gt;&lt;img src='....'&gt;&lt;img src='....'&gt;&lt;/Glider&gt;</pre></div>"
    },
    "hw3": {
        "description": "<div _ngcontent-gtb-c25=\"\" class=\"homework__info-content-description wysiwyg-content wysiwyg-content--converted\"><p>То что уже сделано в классной работе:</p><p><a href=\"https://github.com/olegandreyev/react-course-06-09-2020/tree/master/src/tasks/class-works/cw2/life-cycle-hooks\" target=\"_blank\" class=\"link \">https://github.com/olegandreyev/react-course-06-09-2020/tree/master/src/tasks/class-works/cw2/life-cycle-hooks</a></p><p><br></p><ol><li>Для загрузки данных использовать fetch() и api <a href=\"https://jsonplaceholder.typicode.com/guide.html\" target=\"_blank\" class=\"link \">https://jsonplaceholder.typicode.com/guide.html</a></li><li>2 большие колонки - Список постов и Автор</li><li>Слева отображается список постов, данные брать отсюда <a href=\"https://jsonplaceholder.typicode.com/posts\" rel=\"noopener noreferrer\" target=\"_blank\">https://jsonplaceholder.typicode.com/posts</a>.</li><li>При клике на пост он открывается, отображается тело поста (body) при этом колонка Автора заполняется деталями автора поста (<a href=\"https://jsonplaceholder.typicode.com/users/1\" rel=\"noopener noreferrer\" target=\"_blank\">https://jsonplaceholder.typicode.com/users/</a>{userId})</li></ol><p><br></p><p>То что надо закончить:</p><p><br></p><ol><li>Под постом отображаются комментарии к нему (<a href=\"https://jsonplaceholder.typicode.com/posts/1/comments\" rel=\"noopener noreferrer\" target=\"_blank\">https://jsonplaceholder.typicode.com/posts/{postId}/comments</a>)</li><li>Все компоненты которые загружают что-то через api показывают &lt;Loading /&gt; компонент при загрузке данных.</li></ol><p><br></p><p>Дополнительно:</p><p><br></p><ol><li>В Деталях автора отобразить список его альбомов (<a href=\"https://jsonplaceholder.typicode.com/users/1\" rel=\"noopener noreferrer\" target=\"_blank\">https://jsonplaceholder.typicode.com/users/</a>{userId}/albums. (только названия)</li></ol></div>"
    },
    "hw5": {
        "description": "<div _ngcontent-reg-c15=\"\" class=\"homework__info-content-description wysiwyg-content wysiwyg-content--converted\"><p>Расширить код классной работы (Или написать подобное приложение с такими же страницами, на случай если не нравится semantic-ui-react).</p><p><br></p><p>Например добавить следующие страницы: &lt;Posts /&gt;, &lt;UserAlbums /&gt;, &lt;Album<strong>s</strong> /&gt;, &lt;AlbumPhotos /&gt;</p><p><br></p><p>Придумать удобный переход между страницами, например с поста можно перейти на &lt;UserDetails /&gt; и т.д.</p><p><br></p><p>На странице User<strong>s</strong> - отображать всех юзеров, при клике переходить на страницу пользователя (<strong>сделано в классе</strong>)</p><p><br></p><p>На странице &lt;AlbumPhotos /&gt; - отображать фотографии из альбома</p><p><br></p><p>Дополнительные задания:</p><p><br></p><p><br></p><ol><li>Сделать анимированные переходы между страницами (подсказку найти в гугле например по этой <a href=\"https://medium.com/@ger86/react-how-to-animate-transitions-between-react-router-routes-7f9cb7f5636a\" rel=\"noopener noreferrer\" target=\"_blank\">статье</a>)</li><li>При клике переходе на несуществующий альбом например /users/1/albums/99999 редиректить на страницу /users/1</li><li>Отображение фотографий сделать с помощью библиотеки <a href=\"https://glidejs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Glide.js</a> или любой другой библиотеки аналога (красивые переключения фоток)</li></ol></div>"
    },
    "hw6": {
        "description": "<div _ngcontent-pxr-c129=\"\" class=\"homework__info-content ng-star-inserted\"><div _ngcontent-pxr-c129=\"\" class=\"homework__info-content-description wysiwyg-content wysiwyg-content--converted\"><p>Реализовать приложение. В котором будет 3 Роута:</p><p><br></p><ul><li>Главная страница</li><li>Товары</li><li>Корзина</li></ul><p><br></p><p>На всех страницах справа в навигационном меню есть значок корзины товаров, который должен показывать сколько товаров в данный момент в корзине.</p><p>Пример: <a href=\"https://imgur.com/a/pwvKtJb\" rel=\"noopener noreferrer\" target=\"_blank\">https://imgur.com/a/pwvKtJb</a></p><p><br></p><p><strong>Страница товаров</strong>:</p><p>Рисует список товаров и имеет кнопку \"Add to Cart\", при клике на которую товар добавляется в корзину</p><p><strong>Корзина:</strong></p><p>Показывает список товаров в который в корзине, возле каждого товара есть кнопка удалить при клике удаляет товар из корзины</p><p><strong>Главная страница</strong></p><p>На ваше усмотрение.</p><p><br></p><p>Использовать <strong>Redux</strong></p><p>Список товаров, и список товаров корзины хранить в Store, при этом список товаров в корзине это массив id-шников основного списка товаров.</p><p><br></p><p>Дополнительные задания:</p><p><br></p><p><br></p><ol><li>Реализовать счетчик на странице корзины возле каждого товара. Чтобы пользователь смог менять количество заказанных товаров в корзине. (при добавлении товара в корзину, <strong>изначальное количество 1)</strong></li><li>Товары в корзине и их количество (если смогли сделать пункт 1) складывать в LocalStorage, так чтобы при перезагрузке страница товары не пропадали из корзины</li></ol><p><br></p></div><!----></div>"
    }
}