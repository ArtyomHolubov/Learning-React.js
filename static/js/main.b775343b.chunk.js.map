{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HomeWork1","lazy","HomeWork2","HomeWork3","HomeWork5","routes","name","path","App","Menu","Item","to","as","NavLink","activeClassName","fallback","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAQMA,G,cAAYC,gBAAK,kBAAM,gEACvBC,EAAYD,gBAAK,kBAAM,qEACvBE,EAAYF,gBAAK,kBAAM,+DACvBG,EAAYH,gBAAK,kBAAM,qEACvBI,EACE,CACJC,KAAM,OACNC,KAAM,KAHJF,EAKO,CACTC,KAAM,cACNC,KAAM,gBAPJF,EASO,CACTC,KAAM,cACNC,KAAM,gBAXJF,EAaO,CACTC,KAAM,cACNC,KAAM,gBAfJF,EAiBO,CACTC,KAAM,cACNC,KAAM,gBAoDKC,MAhDf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CACEJ,KAAMD,EAAiBC,KACvBK,GAAIN,EAAiBE,KACrBK,GAAIC,IAASC,gBAAgB,WAE/B,kBAACL,EAAA,EAAKC,KAAN,CACEJ,KAAMD,EAAiBC,KACvBK,GAAIN,EAAiBE,KACrBK,GAAIC,IAASC,gBAAgB,WAE/B,kBAACL,EAAA,EAAKC,KAAN,CACEJ,KAAMD,EAAiBC,KACvBK,GAAIN,EAAiBE,KACrBK,GAAIC,IAASC,gBAAgB,WAE/B,kBAACL,EAAA,EAAKC,KAAN,CACEJ,KAAMD,EAAiBC,KACvBK,GAAIN,EAAiBE,KACrBK,GAAIC,IAASC,gBAAgB,YAGjC,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACT,KAAMF,EAAiBE,MAClC,kBAACP,EAAD,OAEF,kBAAC,IAAD,CAAOgB,OAAK,EAACT,KAAMF,EAAiBE,MAClC,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOc,OAAK,EAACT,KAAMF,EAAiBE,MAClC,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAMF,EAAiBE,MAC5B,kBAACH,EAAD,OAEF,kBAAC,IAAD,CAAOG,KAAMF,EAAYE,MACvB,kBAAC,IAAD,CAAUI,GAAIN,EAAiBE,YC/DvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAIP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b775343b.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Route, Switch, Redirect, NavLink } from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './App.css';\r\n// import HomeWork1 from './hw1/components/HomeWork1';\r\n// import HomeWork2 from './hw2/components/HomeWork2';\r\n\r\nconst HomeWork1 = lazy(() => import('./hw1/components/HomeWork1'));\r\nconst HomeWork2 = lazy(() => import('./hw2/components/HomeWork2'));\r\nconst HomeWork3 = lazy(() => import('./hw3/components/HomeWork3'));\r\nconst HomeWork5 = lazy(() => import('./hw5/components/HomeWork5'));\r\nconst routes = {\r\n  home: {\r\n    name: 'home',\r\n    path: '/'\r\n  },\r\n  homeWork1: {\r\n    name: 'Home Work 1',\r\n    path: '/home-work/1'\r\n  },\r\n  homeWork2: {\r\n    name: 'Home Work 2',\r\n    path: '/home-work/2'\r\n  },\r\n  homeWork3: {\r\n    name: 'Home Work 3',\r\n    path: '/home-work/3'\r\n  },\r\n  homeWork5: {\r\n    name: 'Home Work 5',\r\n    path: '/home-work/5'\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Menu>\r\n        <Menu.Item\r\n          name={routes.homeWork1.name}\r\n          to={routes.homeWork1.path}\r\n          as={NavLink} activeClassName=\"active\"\r\n        />\r\n        <Menu.Item\r\n          name={routes.homeWork2.name}\r\n          to={routes.homeWork2.path}\r\n          as={NavLink} activeClassName=\"active\"\r\n        />\r\n        <Menu.Item\r\n          name={routes.homeWork3.name}\r\n          to={routes.homeWork3.path}\r\n          as={NavLink} activeClassName=\"active\"\r\n        />\r\n        <Menu.Item\r\n          name={routes.homeWork5.name}\r\n          to={routes.homeWork5.path}\r\n          as={NavLink} activeClassName=\"active\"\r\n        />\r\n      </Menu>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route exact path={routes.homeWork1.path}>\r\n            <HomeWork1 />\r\n          </Route>\r\n          <Route exact path={routes.homeWork2.path}>\r\n            <HomeWork2 />\r\n          </Route>\r\n          <Route exact path={routes.homeWork3.path}>\r\n            <HomeWork3 />\r\n          </Route>\r\n          <Route path={routes.homeWork5.path}>\r\n            <HomeWork5 />\r\n          </Route>\r\n          <Route path={routes.home.path}>\r\n            <Redirect to={routes.homeWork1.path} />\r\n          </Route>\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}